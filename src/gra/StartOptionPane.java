
package gra;

import java.awt.event.*;
import javax.swing.*;

/**
 *
 * @author Komputer Domowy
 */
public class StartOptionPane extends JPanel {

    /** ilość startowych użytkowników */
    private int usersAmount = 1;
    /** Tablica paneli wyboru opcji pojedynczego gracza */
    private PlayerInitPane[] playerInitPanes = new PlayerInitPane[4];
    
    /**
     * Creates new form StartOptionPane
     */
    public StartOptionPane() {
	initComponents();
	myOptions();
    }
    
    public void myOptions(){
	setPlayerInitList();
    }
    
    public PlayerInitPane[] getPlayerInitPanes(){
	return playerInitPanes;
    }
    
    /**
     * Metoda inicjalizująca panele opcji użytkowników
     */
    public void setPlayerInitList(){
	InitValue.initCounterColors();
	setButtons();
	lUsersAmount.setText("Ilość graczy: " + usersAmount);
	for(int i = 0; i < 4; i++){
	    // Jeśli i < usersAmount to stworzy panel dla gracza.
	    // Jeśli nie to stworzy panel dla bota.
	    playerInitPanes[i] = new PlayerInitPane(i < usersAmount);
	    playerInitPanes[i].getCBCounterColor().addItemListener(new CBCounterColorHandler());
	    pPlayerInitList.add(playerInitPanes[i]);
	}
    }
    
    /**
     * <pre>
     * Metoda zmieniająca panel wyboru opcji dla użytkownika w zależności 
     * od zmiany ilości użytkowników
     * </pre>
     */
    protected void changePlayersList(){
	for(int i = 0; i < playerInitPanes.length; i++){
	    // Jeśli aktualny panel powinien być dla użytkownika 
	    // a nim nie jest to zmień go na panel dla użytkownika.
	    // Jeśli aktualny panel powinien być dla bota a jest
	    // dla użytkownika to zamień na panel dla bota.
	    if(
		i <= (usersAmount - 1) && !playerInitPanes[i].getIfUser()
		|| i > (usersAmount - 1) && playerInitPanes[i].getIfUser()    
	    )
		playerInitPanes[i].changePanel();
	}
    }
    
    /**
     * <pre>
     * Metoda, która zmniejsza/zwiększa ilość użytkowników
     * i ustawiająca panele w zależności od tego czy ma zostać 
     * przeznaczony dla użytkownika lub bota.
     * </pre>
     * 
     * @param ifIncrement jeśli tak to zwiększy <code>usersAmount</code>.
     */
    protected void changeUsersAmount(boolean ifIncrement){                                           
	usersAmount += ifIncrement ? 1 : -1;
        setButtons();
	lUsersAmount.setText("Ilość graczy: " + usersAmount);
	changePlayersList();
    }                                         

    
    protected void setButtons(){
	bDecrementUsersAmout.setEnabled(!(usersAmount == 1));
	bIncrementUsersAmout.setEnabled(!(usersAmount == 4));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pOptions = new javax.swing.JPanel();
        pPlayerInitList = new javax.swing.JPanel();
        pSetUsersAmout = new javax.swing.JPanel();
        bIncrementUsersAmout = new javax.swing.JButton();
        bDecrementUsersAmout = new javax.swing.JButton();
        lUsersAmount = new javax.swing.JLabel();

        pOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(51, 0, 153)), "Opcje"));

        pPlayerInitList.setPreferredSize(new java.awt.Dimension(200, 200));
        pPlayerInitList.setLayout(new java.awt.GridLayout(4, 1, 5, 15));

        bIncrementUsersAmout.setText("=|>");
        bIncrementUsersAmout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bIncrementUsersAmoutActionPerformed(evt);
            }
        });

        bDecrementUsersAmout.setText("<|=");
        bDecrementUsersAmout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDecrementUsersAmoutActionPerformed(evt);
            }
        });

        lUsersAmount.setText("Ilość graczy:");

        javax.swing.GroupLayout pSetUsersAmoutLayout = new javax.swing.GroupLayout(pSetUsersAmout);
        pSetUsersAmout.setLayout(pSetUsersAmoutLayout);
        pSetUsersAmoutLayout.setHorizontalGroup(
            pSetUsersAmoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSetUsersAmoutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bDecrementUsersAmout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lUsersAmount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bIncrementUsersAmout)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pSetUsersAmoutLayout.setVerticalGroup(
            pSetUsersAmoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSetUsersAmoutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pSetUsersAmoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bDecrementUsersAmout)
                    .addComponent(bIncrementUsersAmout)
                    .addComponent(lUsersAmount))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pOptionsLayout = new javax.swing.GroupLayout(pOptions);
        pOptions.setLayout(pOptionsLayout);
        pOptionsLayout.setHorizontalGroup(
            pOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pOptionsLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(pOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(pPlayerInitList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pSetUsersAmout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        pOptionsLayout.setVerticalGroup(
            pOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pSetUsersAmout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pPlayerInitList, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(pOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bDecrementUsersAmoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDecrementUsersAmoutActionPerformed
        changeUsersAmount(false);
    }//GEN-LAST:event_bDecrementUsersAmoutActionPerformed

    private void bIncrementUsersAmoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bIncrementUsersAmoutActionPerformed
        changeUsersAmount(true);
    }//GEN-LAST:event_bIncrementUsersAmoutActionPerformed

    /** 
     * Klasa wewnętrzna obsługująca operacje na liście rozwijanej.
     */
    protected class CBCounterColorHandler implements ItemListener{

	@Override
	public void itemStateChanged(ItemEvent e) {
	    String item = (String)e.getItem();
	    
	    // wywołuje się kiedy zostanie odznaczony
	    if(e.getStateChange() != ItemEvent.SELECTED){
		if(!item.equals("<Domyślny>")){
		    for(PlayerInitPane pane : playerInitPanes){
			if(pane.getCBCounterColor() != e.getSource())
			    // dodaje we wszystkich listach rozwijanych kolor porzucony przez gracza (odznaczony)
			    pane.getCBCounterColor().addItem(item);
		    }
		}
	    }
	    
	    // wywołuje się gdy zostaje zaznaczony
	    if(e.getStateChange() == ItemEvent.SELECTED) {
		if(!item.equals("<Domyślny>")){
		    for(PlayerInitPane pane : playerInitPanes){
			if(pane.getCBCounterColor() != e.getSource())
			    // usuwa we wszystkich listach rozwijanych kolor wybrany przez użytkownika
			    pane.getCBCounterColor().removeItem(item);
		    }
		}
	    }
	}
	
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDecrementUsersAmout;
    private javax.swing.JButton bIncrementUsersAmout;
    private javax.swing.JLabel lUsersAmount;
    private javax.swing.JPanel pOptions;
    private javax.swing.JPanel pPlayerInitList;
    private javax.swing.JPanel pSetUsersAmout;
    // End of variables declaration//GEN-END:variables
}
